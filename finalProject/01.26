작성한 게시글을 삭제하기를 누르면 DB에서 삭제하고 나머지 게시글들을 UI에 나오게하는 기능에서 삭제하기를 하면 UI에서는 삭제가 되는데 DB에서는 삭제가 안되는 문제가 생겼다.
그러다보니 페이지를 리렌더링하면 삭제하기버튼을 누른 글이 다시 UI에 나오는 문제도 딸려왔다. 


 // 리뷰 내용 상태
  const [index, setIndex] = useState<string>('');
  //리뷰목록 상태
  const [QnAs, setQnA] = useState<Qna[]>([]);

 const fetchQnAs = async () => {
      if (data.itemName) {
        const q = query(collection(db, 'QnA'), where('itemName', '==', data.itemName));
        const querySnapshot = await getDocs(q);
        const QnAData = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Qna));
        setQnA(QnAData);
      }
    };

    fetchQnAs();
  }, [data.itemName]);


const handleDeleteQnA = async (QnAId: string) => {
    try {
      await deleteDoc(doc(db, 'QnA', QnAId));

      setQnA(prevQnAs => prevQnAs.filter(QnA => QnA.id !== QnAId));
    } catch (error) {
      console.error('리뷰 삭제 중 오류 발생: ', error);
    }
  };

  => 사실 로직에는 문제가 없었다. 가장큰 문제는 게시글을 작성한 유저에 대한 데이터를 처음엔 유저의 이메일과 게시글에 대한 정보만 갖고왔다.
     그러다보니 어떤 제품의 게시글을 쓴지 모르다보니 생긴 에러였다(제품에 대한 정보가 없으니 게시글 작성에서도 에러가 났다)
     그래서 DB에 제품이름에 대한 필드를 만들어주고, 제품에관한 페이지에 들어가면 getDocs를 통해서 QnAs에 유저의 이메일, 리뷰내용(index),제품명 3개를 배열로 정보를 갖고왔다.
     그후, deleteDoc(doc(db, 'QnA', QnAId)); QnAId(유저의 이메일)이 맞는걸 삭제하고, 필터를 통해서 나머지 index(게시글)들을 UI에 보여줬다.

     거른정보를 통해서 한번더 거르는 작업으로 총 2번의 작업을 한다고 생각한다. 이게 최선의 방법인지는 리팩토링하면서 한번 더 고민해볼 생각이다. 우선은 가장 먼저 생각이 든 방법이고
     다행이도 이 방법이 틀리진 않았다. 하지만 2번의 작업이 들어가기 때문에 1번의 작업으로도 UI에 표현이 될 수 있을지 고민을 해봐야한다.
     
