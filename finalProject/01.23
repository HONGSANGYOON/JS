문제점: UI에서 버튼을 클릭할때마다 해당 버튼에 맞는 제품들만을 필터링해서 데이터를 갖고오고 그 데이터들을 UI에 뿌려줘야하는데 필터링부분에서 제대로 구현이 되지 못했다.

해결방법: 전체 데이터를 갖고오고 Filter를 사용하여 필요한 데이터만 걸러지도록 구현했다.

//DB데이터 정보 저장
  const [itemsData, setItemsData] = useState<Item[]>([]);

//데이터 카테고리 및 타입별 필터링
  const filteredItmes = itemsData
    .filter(item => item.category === selectedCategory)
    .filter(item => {
      if (selectedType === '') return true;
      return item.type === selectedType;
    });

=> 모든 데이터를 갖고와서 저장된곳은 itemsData인데 필터링으로 인하여 걸러진 데이터는 filteredItmes에 들어가게 됬다.
   자식컴포넌트에 필터링된 데이터가 필요하면 filteredItmes를 props로 내려주면 된다.



   문제점: 첫화면이 렌더링될때는 필터링된 부분이 없기 떄문에 모든 제품들이 보여져야하는데 제품이 하나도 보이지 않는 문제가 발생했다.

   해결방법: useEffect를 사용하여 최초 렌더링시에는 전체 데이터를 UI에 뿌려주고,
            그 후엔 또다른 useEffect를 사용하여 버튼을 클릭할때마다 리렌더링시 필터링된 데이터를 UI에 뿌려주게 코드를 작성했다.


  // 컴포넌트가 처음 마운트될 때와 selectedCategory가 변경될 때 실행되는 useEffect
  useEffect(() => {
    // 첫 렌더링 시에는 itemsData 사용
    setRenderData(itemsData);
  }, [itemsData]);

  // selectedCategory가 변경될 때마다 실행되는 useEffect
  useEffect(() => {
    // selectedCategory에 따라 적절한 데이터 설정
    if (selectedCategory) {
      setRenderData(filteredItems);
    } else {
      setRenderData(itemsData);
    }
  }, [selectedCategory, filteredItems, itemsData]);

  => 위에 useEffect 첫렌더링시 모든 데이터를 불러오는거고 아래 useEffect는 필터링을 통한 데이터를 갖고오는 로직이다.



정말 쉬우면 쉬운 로직이다. 하지만 직접 생각하고 코드를 작성하는건 항상 어려운거 같다....언제쯤이면 저런 코드가 그냥 툭하고 생각이 날지....
하지만 오늘도 뿌듯하게 문제를 해결해서 기분좋은 성취감을 얻고 가는 날이다. 빨리 페이지네이션 하러 가야지.....
