----------------Storage에 파일 업로드하기----------------------
Firestore SDK 추가
firebase.js 에 Storage 관련 코드를 추가해줍니다.
import { initializeApp } from "firebase/app";
...
import { getStorage } from "firebase/storage";

const firebaseConfig = {
	...
};

const app = initializeApp(firebaseConfig);
...
export const storage = getStorage(app);
​
이제 storage에 파일을 업로드 합니다.
input 태그를 이용하여 파일을 업로드 하는 경우에는, uploadBytes 함수를 사용합니다. 
먼저, FileUpload.js 에서 파일을 업로드 하는 함수를 작성합니다. 
Firebase에 있는 Storage에 접근하기 위해서는 해당 위치를 참조해야합니다. 이 때, ref 함수를 사용합니다.
ref(storage, '폴더/파일이름')
​
ref 함수는 첫번째 인자로 storage 객체를 받고, 두번째 인자로 문자열을 받습니다.
이때, 문자열 사이를 / 로 구분하면 해당 경로를 따라 폴더가 만들어집니다.
파일을 업로드 할 때 현재 유저의 정보를 기준으로 파일을 업로드 하기 위해 다음과 같이 코드를 작성합니다.
// components/FileUpload.js
const handleUpload = async () => {
    // ref 함수를 이용해서 Storage 내부 저장할 위치를 지정하고, uploadBytes 함수를 이용해서 파일을 저장합니다.
    const imageRef = ref(
      storage,
      `${auth.currentUser.uid}/${selectedFile.name}`
    );
    await uploadBytes(imageRef, selectedFile);
  };
​
uploadBytes의 경우 첫번째 인자로는 imageRef를, 두번째 인자로는 File이나 Blob 객체를 받습니다.

Storage를 확인해보면, user의 uid 값으로 폴더가 생성된 것을 확인할 수 있습니다.

---------------파일 URL가져오기------------------
Storage에 업로드한 파일의 URL을 가져오려면 `getDownloadURL` 함수에 파일의 참조값을 인자로 넣어 호출해야 합니다. 다음과 같이 코드를 작성합니다.

```jsx
getDownloadURL(imageRef)
```

```jsx
const handleUpload = async () => {
    // ref 함수를 이용해서 Storage 내부 저장할 위치를 지정하고, uploadBytes 함수를 이용해서 파일을 저장합니다.
    const imageRef = ref(
      storage,
      `${auth.currentUser.uid}/${selectedFile.name}`
    );
    await uploadBytes(imageRef, selectedFile);

    // 파일 URL 가져오기
    const downloadURL = await getDownloadURL(imageRef);
		console.log(downloadURL)
  };
```

이렇게 가져온 URL을 Firebase에 저장한다면, 게시글에 유저가 업로드한 이미지도 포함할 수 있따.


